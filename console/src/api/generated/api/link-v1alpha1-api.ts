/* tslint:disable */
/* eslint-disable */
/**
 * Halo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.17.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { JsonPatchInner } from '../models';
// @ts-ignore
import type { Link } from '../models';
// @ts-ignore
import type { LinkList } from '../models';
/**
 * LinkV1alpha1Api - axios parameter creator
 * @export
 */
export const LinkV1alpha1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create Link
         * @param {Link} [link] Fresh link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLink: async (link?: Link, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/core.halo.run/v1alpha1/links`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(link, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Link
         * @param {string} name Name of link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLink: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteLink', 'name', name)
            const localVarPath = `/apis/core.halo.run/v1alpha1/links/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Link
         * @param {string} name Name of link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLink: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getLink', 'name', name)
            const localVarPath = `/apis/core.halo.run/v1alpha1/links/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Link
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLink: async (page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/core.halo.run/v1alpha1/links`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (labelSelector) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (fieldSelector) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Patch Link
         * @param {string} name Name of link
         * @param {Array<JsonPatchInner>} [jsonPatchInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLink: async (name: string, jsonPatchInner?: Array<JsonPatchInner>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('patchLink', 'name', name)
            const localVarPath = `/apis/core.halo.run/v1alpha1/links/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jsonPatchInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Link
         * @param {string} name Name of link
         * @param {Link} [link] Updated link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLink: async (name: string, link?: Link, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('updateLink', 'name', name)
            const localVarPath = `/apis/core.halo.run/v1alpha1/links/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(link, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LinkV1alpha1Api - functional programming interface
 * @export
 */
export const LinkV1alpha1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LinkV1alpha1ApiAxiosParamCreator(configuration)
    return {
        /**
         * Create Link
         * @param {Link} [link] Fresh link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLink(link?: Link, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Link>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLink(link, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LinkV1alpha1Api.createLink']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete Link
         * @param {string} name Name of link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLink(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLink(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LinkV1alpha1Api.deleteLink']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Link
         * @param {string} name Name of link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLink(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Link>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLink(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LinkV1alpha1Api.getLink']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List Link
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLink(page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinkList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLink(page, size, labelSelector, fieldSelector, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LinkV1alpha1Api.listLink']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Patch Link
         * @param {string} name Name of link
         * @param {Array<JsonPatchInner>} [jsonPatchInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLink(name: string, jsonPatchInner?: Array<JsonPatchInner>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Link>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLink(name, jsonPatchInner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LinkV1alpha1Api.patchLink']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update Link
         * @param {string} name Name of link
         * @param {Link} [link] Updated link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLink(name: string, link?: Link, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Link>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLink(name, link, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LinkV1alpha1Api.updateLink']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LinkV1alpha1Api - factory interface
 * @export
 */
export const LinkV1alpha1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LinkV1alpha1ApiFp(configuration)
    return {
        /**
         * Create Link
         * @param {LinkV1alpha1ApiCreateLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLink(requestParameters: LinkV1alpha1ApiCreateLinkRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Link> {
            return localVarFp.createLink(requestParameters.link, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Link
         * @param {LinkV1alpha1ApiDeleteLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLink(requestParameters: LinkV1alpha1ApiDeleteLinkRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteLink(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Link
         * @param {LinkV1alpha1ApiGetLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLink(requestParameters: LinkV1alpha1ApiGetLinkRequest, options?: RawAxiosRequestConfig): AxiosPromise<Link> {
            return localVarFp.getLink(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * List Link
         * @param {LinkV1alpha1ApiListLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLink(requestParameters: LinkV1alpha1ApiListLinkRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<LinkList> {
            return localVarFp.listLink(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Patch Link
         * @param {LinkV1alpha1ApiPatchLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLink(requestParameters: LinkV1alpha1ApiPatchLinkRequest, options?: RawAxiosRequestConfig): AxiosPromise<Link> {
            return localVarFp.patchLink(requestParameters.name, requestParameters.jsonPatchInner, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Link
         * @param {LinkV1alpha1ApiUpdateLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLink(requestParameters: LinkV1alpha1ApiUpdateLinkRequest, options?: RawAxiosRequestConfig): AxiosPromise<Link> {
            return localVarFp.updateLink(requestParameters.name, requestParameters.link, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createLink operation in LinkV1alpha1Api.
 * @export
 * @interface LinkV1alpha1ApiCreateLinkRequest
 */
export interface LinkV1alpha1ApiCreateLinkRequest {
    /**
     * Fresh link
     * @type {Link}
     * @memberof LinkV1alpha1ApiCreateLink
     */
    readonly link?: Link
}

/**
 * Request parameters for deleteLink operation in LinkV1alpha1Api.
 * @export
 * @interface LinkV1alpha1ApiDeleteLinkRequest
 */
export interface LinkV1alpha1ApiDeleteLinkRequest {
    /**
     * Name of link
     * @type {string}
     * @memberof LinkV1alpha1ApiDeleteLink
     */
    readonly name: string
}

/**
 * Request parameters for getLink operation in LinkV1alpha1Api.
 * @export
 * @interface LinkV1alpha1ApiGetLinkRequest
 */
export interface LinkV1alpha1ApiGetLinkRequest {
    /**
     * Name of link
     * @type {string}
     * @memberof LinkV1alpha1ApiGetLink
     */
    readonly name: string
}

/**
 * Request parameters for listLink operation in LinkV1alpha1Api.
 * @export
 * @interface LinkV1alpha1ApiListLinkRequest
 */
export interface LinkV1alpha1ApiListLinkRequest {
    /**
     * Page number. Default is 0.
     * @type {number}
     * @memberof LinkV1alpha1ApiListLink
     */
    readonly page?: number

    /**
     * Size number. Default is 0.
     * @type {number}
     * @memberof LinkV1alpha1ApiListLink
     */
    readonly size?: number

    /**
     * Label selector. e.g.: hidden!&#x3D;true
     * @type {Array<string>}
     * @memberof LinkV1alpha1ApiListLink
     */
    readonly labelSelector?: Array<string>

    /**
     * Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
     * @type {Array<string>}
     * @memberof LinkV1alpha1ApiListLink
     */
    readonly fieldSelector?: Array<string>

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof LinkV1alpha1ApiListLink
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for patchLink operation in LinkV1alpha1Api.
 * @export
 * @interface LinkV1alpha1ApiPatchLinkRequest
 */
export interface LinkV1alpha1ApiPatchLinkRequest {
    /**
     * Name of link
     * @type {string}
     * @memberof LinkV1alpha1ApiPatchLink
     */
    readonly name: string

    /**
     * 
     * @type {Array<JsonPatchInner>}
     * @memberof LinkV1alpha1ApiPatchLink
     */
    readonly jsonPatchInner?: Array<JsonPatchInner>
}

/**
 * Request parameters for updateLink operation in LinkV1alpha1Api.
 * @export
 * @interface LinkV1alpha1ApiUpdateLinkRequest
 */
export interface LinkV1alpha1ApiUpdateLinkRequest {
    /**
     * Name of link
     * @type {string}
     * @memberof LinkV1alpha1ApiUpdateLink
     */
    readonly name: string

    /**
     * Updated link
     * @type {Link}
     * @memberof LinkV1alpha1ApiUpdateLink
     */
    readonly link?: Link
}

/**
 * LinkV1alpha1Api - object-oriented interface
 * @export
 * @class LinkV1alpha1Api
 * @extends {BaseAPI}
 */
export class LinkV1alpha1Api extends BaseAPI {
    /**
     * Create Link
     * @param {LinkV1alpha1ApiCreateLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinkV1alpha1Api
     */
    public createLink(requestParameters: LinkV1alpha1ApiCreateLinkRequest = {}, options?: RawAxiosRequestConfig) {
        return LinkV1alpha1ApiFp(this.configuration).createLink(requestParameters.link, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Link
     * @param {LinkV1alpha1ApiDeleteLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinkV1alpha1Api
     */
    public deleteLink(requestParameters: LinkV1alpha1ApiDeleteLinkRequest, options?: RawAxiosRequestConfig) {
        return LinkV1alpha1ApiFp(this.configuration).deleteLink(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Link
     * @param {LinkV1alpha1ApiGetLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinkV1alpha1Api
     */
    public getLink(requestParameters: LinkV1alpha1ApiGetLinkRequest, options?: RawAxiosRequestConfig) {
        return LinkV1alpha1ApiFp(this.configuration).getLink(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Link
     * @param {LinkV1alpha1ApiListLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinkV1alpha1Api
     */
    public listLink(requestParameters: LinkV1alpha1ApiListLinkRequest = {}, options?: RawAxiosRequestConfig) {
        return LinkV1alpha1ApiFp(this.configuration).listLink(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Patch Link
     * @param {LinkV1alpha1ApiPatchLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinkV1alpha1Api
     */
    public patchLink(requestParameters: LinkV1alpha1ApiPatchLinkRequest, options?: RawAxiosRequestConfig) {
        return LinkV1alpha1ApiFp(this.configuration).patchLink(requestParameters.name, requestParameters.jsonPatchInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Link
     * @param {LinkV1alpha1ApiUpdateLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinkV1alpha1Api
     */
    public updateLink(requestParameters: LinkV1alpha1ApiUpdateLinkRequest, options?: RawAxiosRequestConfig) {
        return LinkV1alpha1ApiFp(this.configuration).updateLink(requestParameters.name, requestParameters.link, options).then((request) => request(this.axios, this.basePath));
    }
}

